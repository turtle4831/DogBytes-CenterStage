package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.IMU;


public class fieldcentricdrivetest extends LinearOpMode {
    public DcMotor FL_Motor;

    public DcMotor FR_Motor;

    public DcMotor BL_Motor;

    public DcMotor BR_Motor;

   public BNO055IMU imu;



@Override
public void runOpMode(){
    FL_Motor = hardwareMap.get(DcMotor.class,"FL_Motor");
    FR_Motor = hardwareMap.get(DcMotor.class,"FR_Motor");
    BL_Motor = hardwareMap.get(DcMotor.class,"BL_Motor");
    BR_Motor = hardwareMap.get(DcMotor.class,"BR_Motor");


    //Reverse the motors reverse
    FL_Motor.setDirection(DcMotorSimple.Direction.REVERSE);
    FR_Motor.setDirection(DcMotorSimple.Direction.REVERSE);
    BL_Motor.setDirection(DcMotorSimple.Direction.REVERSE);
    BR_Motor.setDirection(DcMotorSimple.Direction.REVERSE);

    // Retrieve the IMU from the hardware map
    imu = hardwareMap.get(BNO055IMU.class,"imu");
    //Adjust the orientation parameters to match your robot
    IMU.Parameters parameters = new IMU.Parameters(new RevHubOrientationOnRobot(
    RevHubOrientationOnRobot.LogoFacingDirection.UP,
            RevHubOrientationOnRobot.UsbFacingDirection.FORWARD));
    //Without this, the REV Hub's orientation is assumed to be logo up / USB forward
    imu.initialize(parameters);



    waitForStart();

    if(isStopRequested()) return;

    while(opModeIsActive()){
        double y = -gamepad1.left_stick_y; // Y stick always reversed
        double x = gamepad1.left_stick_x;
        double rx = gamepad1.right_stick_x;

        if(gamepad1.options){
            imu.resetYaw();
        }

        double botHeading = imu.getRobotYawPitchRollAngles().getYaw(BNO055IMU.AngleUnit.RADIANS);

        //Rotate the movement direction counter to the bot's rotation
        double rotX = x * Math.cos(-botHeading) - y * Math.sin(-botHeading);
        double rotY = x * Math.sin(-botHeading) + y * Math.cos(-botHeading);

        rotX = rotX * 1.1; //Counteract imperfect strafing


        //Denominator is the largest motor power (absolute value) or 1
        //This ensures all the powers maintain the same ratio
        //but only is at least one is out of the range (-1,1)
        double denominator = Math.max(Math.abs(y) + (Math.abs(x) + (Math.abs(rx), 1);
        double FL_MotorPower = (y + x + rx) / denominator;
        double FR_MotorPower = (y - x + rx) / denominator;
        double BL_MotorPower = (y - x - rx) / denominator;
        double BR_MotorPower = (y + x - rx) / denominator;

        FL_Motor.setPower(FL_MotorPower);
        FR_Motor.setPower(FR_MotorPower);
        BL_Motor.setPower(BL_MotorPower);
        BR_Motor.setPower(BR_MotorPower);


    }
}
}
